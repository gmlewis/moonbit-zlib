package gmlewis/zlib

alias @gmlewis/flate as @flate
alias @gmlewis/io as @io

// Values
let err_checksum : @io.IOError

let err_dictionary : @io.IOError

let err_header : @io.IOError

// Types and methods
type Reader
impl Reader {
  close(Self) -> @io.IOError?
  new(&@flate.Reader) -> (&@io.ReadCloser, @io.IOError?)
  new_dict(&@flate.Reader, @io.Slice[Byte]) -> (&@io.ReadCloser, @io.IOError?)
  read(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  reset(Self, &@flate.Reader, @io.Slice[Byte]) -> @io.IOError?
}

type Writer
impl Writer {
  close(Self) -> @io.IOError?
  flush(Self) -> @io.IOError?
  new(&@io.Writer) -> Self
  new_dict(&@io.Writer, @io.Slice[Byte]) -> Self
  reset(Self, &@io.Writer) -> Unit
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
}

// Type aliases

// Traits
pub(open) trait resetter {
  reset(Self, &@io.Reader, @io.Slice[Byte]) -> @io.IOError?
}

